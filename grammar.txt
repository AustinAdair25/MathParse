(), function (cos, sin, etc, ...)
- : unary 
^ : power
* , / : multiplication 
+ , - : addition

expr -> multiplication { ( + | - ) multiplication } 
multiplication -> power { ( * | / ) power } | ml -> power
power -> unary { ^ unary }
unary -> [ - ] token
token ->  function | number 
function -> identifier ["(" expr ")"] | "(" expr ")"
number -> [0..9]+(.[0..9]+)?
identifier -> [a-zA-Z][a-zA-Z0-9]*

Tokenizer
Parse
BinaryTree
- print tree 
- Root: TreeNode
- TreeNode
    - Token : from Parse
    - leftNode
    - rightNode
    - number of dashes

Token
- identifier : function, variable name
- number
- operator ( ) + - 

- Parser -> parse the input
        - check the syntax
        - construct parse tree

- visualizing the tree
- substituting values







