(), function (cos, sin, etc, ...)
- : unary 
^ : power
* , / : multiplication 
+ , - : addition

expr -> multiplication { ( + | - ) multiplication } 
multiplication -> power { ( * | / ) power }
power -> unary { ^ unary }
unary -> [ - ] token
token ->  function | number 
function -> identifier ["(" expr ")"] | "(" expr ")"
number -> [0..9]+(.[0..9]+)?
identifier -> [a-zA-Z][a-zA-Z0-9]*

Tokenizer
Parse
BinaryTree
- print tree 
- Root: TreeNode
- TreeNode
    - Token : from Parse
    - leftNode
    - rightNode
    - number of dashes


cos(a + b^2)

-cos
--+ 
---a
---^
----b
----2

current -> left -> right: pre
left -> right -> current: post


         a

  k             c

b   d         e   t

      t

    a   y

a -> k -> b -> d -> c -> e -> t


b -> d -> k -> e -> t -> c -> a

0
                            root:
                   a: 6                  b:22

       c:2                d:10        e:   f:
(0, 0)    (4, 4)       (8,8) (12,12)
None(0)   None(4)    None(8) None(12)





0    4    8     12

  |
-----
|   |










